//CONSTANTES DE DISTANCIA
#define DISTANCIA_MIN 10 
#define DISTANCIA_MAX_ABAJO 15
#define DISTANCIA_MAX 400 
//DECLARAMOS PINES DE ULTRA SONIDO
#define PIN_TRIG_ABAJO 10 
#define PIN_ECO_ABAJO 9
#define PIN_TRIG_ARRIBA 11
#define PIN_ECO_ARRIBA 12
//PINES DEL MOTOR IZQUIERDO CON PUENTE H
#define PIN_MOTOR_IZQUIERDO_IN1 2
#define PIN_MOTOR_IZQUIERDO_IN2 3
#define PIN_MOTOR_IZQUIERDO_ENA 5
//PINES DEL MOTOR DERECHO CON PUENTE H
#define PIN_MOTOR_DERECHO_IN1 6
#define PIN_MOTOR_DERECHO_IN2 7
#define PIN_MOTOR_DERECHO_ENA 8
//INFORMACION DE DISTNCIA RECOLECTADA POR LOS SENSORES
int distancia_abajo;
int distancia_arriba;
int duracion_abajo;
int duracion_arriba;
int periodo 20;
unsigned long tiempo_actual;
//INICIO DE FUNCIONES
void setup(){
    //pinMode DE ULTRASONIDOS
 pinMode(PIN_TRIG_ABAJO, OUTPUT);
 pinMode(PIN_ECO_ABAJO, INPUT);
 //pinMode DE MOTOR IZQUIERDO
 pinMode(PIN_MOTOR_IZQUIERDO_IN1, OUTPUT);
 pinMode(PIN_MOTOR_IZQUIERDO_IN2, OUTPUT);
 pinMode(PIN_MOTOR_IZQUIERDO_ENA, OUTPUT);  
 //pinMode DE MOTOR DERECHO
 pinMode(PIN_MOTOR_DERECHO_IN1, OUTPUT);
 pinMode(PIN_MOTOR_DERECHO_IN2, OUTPUT);
 pinMode(PIN_MOTOR_DERECHO_ENA, OUTPUT);
}
//FUNCIOS DE RECOLECCION DE DATOS DE LOS SENSORES
void SENSORES(){
{
    if (millis()>tiempo_actual + periodo)
    //SENSOR DE ABAJO
    digitalWrite(PIN_TRIG_ABAJO, HIGH);
    digitalWrite(PIN_TRIG_ABAJO, LOW);
    duracion_abajo = pulseIn(PIN_ECO_ABAJO, HIGH);
    distancia_abajo = duracion_abajo / 58.2;
    //SENSOR DE ARRIBA:
    digitalWrite(PIN_TRIG_ARRIBA, HIGH);
    digitalWrite(PIN_TRIG_ARRIBA, LOW);
    duracion_arriba = pulseIn(PIN_ECO_ARRIBA, HIGH);
    distancia_arriba = duracion_arriba / 58.2;
}

}
//FUNCIOS PARA MOVER LOS MOTORES PARA ADELANTE
void MOTORES_ADELANTE(){
    //control del motor izquierdo
    analogWrite(PIN_MOTOR_IZQUIERDO_ENA, 100);
    digitalWrite(PIN_MOTOR_IZQUIERDO_IN1, LOW);
    digitalWrite(PIN_MOTOR_IZQUIERDO_IN2, HIGH);
    //control del motor DERECHO
   analogWrite(PIN_MOTOR_DERECHO_ENA, 100);
    digitalWrite(PIN_MOTOR_DERECHO_IN1, LOW);
    digitalWrite(PIN_MOTOR_DERECHO_IN2, HIGH);
}
//FUNCIOS DE DOBLAR A LA DERECHA INVIRTIENDO UN MOTOR
void MOTORES_DOBLAR_DERECHA(){
    //control del motor izquierdo
    analogWrite(PIN_MOTOR_IZQUIERDO_ENA, 100);
    digitalWrite(PIN_MOTOR_IZQUIERDO_IN1, LOW);
    digitalWrite(PIN_MOTOR_IZQUIERDO_IN2, HIGH);
    //control del motor DERECHO
   analogWrite(PIN_MOTOR_DERECHO_ENA, 100);
    digitalWrite(PIN_MOTOR_DERECHO_IN1, HIGH);
    digitalWrite(PIN_MOTOR_DERECHO_IN2, LOW);
}
//FUNCIOS DE DOBLAR A LA IZQUIERDA INVIRTIENDO UN MOTOR
void MOTORES_DOBLAR_IZQUIERDA(){
    //control del motor izquierdo
    analogWrite(PIN_MOTOR_IZQUIERDO_ENA, 100);
    digitalWrite(PIN_MOTOR_IZQUIERDO_IN1, HIGH);
    digitalWrite(PIN_MOTOR_IZQUIERDO_IN2, LOW);
    //control del motor DERECHO
   analogWrite(PIN_MOTOR_DERECHO_ENA, 100);
    digitalWrite(PIN_MOTOR_DERECHO_IN1, LOW);
    digitalWrite(PIN_MOTOR_DERECHO_IN2, HIGH);
}
// RECOPILACION DE FUNCIONES PARA SU MOVIMIENTO AUTONOMO 
void movimiento_autonomo(){
    if (distancia_arriba <= DISTANCIA_MAX && distancia_abajo <= DISTANCIA_MAX_ABAJO){
      MOTORES_ADELANTE();   
    }
    else if (distancia_arriba <= DISTANCIA_MIN) //else if de giro tomando en cuenta el sensor de arriba
    {
      MOTORES_DOBLAR_IZQUIERDA();
    }
}
//LOOP
void loop()
{
    movimiento_autonomo();
}
